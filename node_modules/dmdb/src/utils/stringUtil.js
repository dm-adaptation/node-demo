"use strict";

Object.defineProperty(exports, "__esModule", {
    value: !0
});

var dateUtil_1 = require("./dateUtil"), StringUtil = function() {
    function e() {}
    return e.equalsIgnoreCase = function(r, n) {
        return r && n ? r.toLowerCase() === n.toLowerCase() : r === n;
    }, e.isDigit = function(r) {
        return /(^[0-9]+$)/.test(r);
    }, e.isUnicodeLetter = function(r) {
        return /^\p{L}/u.test(r);
    }, e.isLetterOrDigit = function(r) {
        return e.isDigit(r) || e.isUnicodeLetter(r);
    }, e.hexStringToBuffer = function(r) {
        var n = Buffer.alloc(0), t = !1;
        if (0 !== (r = r.trim()).indexOf("0x") && 0 !== r.indexOf("0X") || (r = r.substring(2, r.length)), 
        0 === r.length) return n;
        r.length % 2 != 0 && r.padStart(r.length + 1, "0"), n = Buffer.alloc(r.length / 2);
        for (var e = 0, u = 0; u < r.length; u += 2) {
            var f = this.convertHex(r.charCodeAt(u)), i = this.convertHex(r.charCodeAt(u + 1));
            if (-1 === f || -1 === i) {
                t = !0;
                break;
            }
            n[e++] = 16 * f + i;
        }
        return t && (n = Buffer.from(r)), n;
    }, e.isHighSurrogate = function(r) {
        return 55296 <= r && r <= 56319;
    }, e.charCount = function(r) {
        return 65536 <= r ? 2 : 1;
    }, e.processDoubleQuoteOfName = function(r) {
        return e.processQuoteOfName(r, '"');
    }, e.processSingleQuoteOfName = function(r) {
        return e.processQuoteOfName(r, "'");
    }, e.processQuoteOfName = function(r, n) {
        if (!n || !r) return r;
        for (var t, e = r, u = "", f = n.length; -1 !== (t = e.indexOf(n)); ) u += e.substring(0, t + f) + n, 
        e = e.substring(t + f);
        return u += e;
    }, e.array2String = function(r) {
        for (var n = "", t = 0; t < r.length; t++) n += (0 === t ? "" : ", ") + e.escape(r[t]);
        return n;
    }, e.escape = function(r) {
        if (null == r) return "NULL";
        switch (typeof r) {
          case "boolean":
            return r ? "1" : "0";

          case "number":
            return r.toString();

          case "object":
            if (r instanceof Date) return "'" + dateUtil_1.DateUtil.formatDate(r, !0) + "'";
            if (r instanceof Buffer) return "0x" + r.toString("hex");

          default:
            return "'" + e.processSingleQuoteOfName(r.toString()) + "'";
        }
    }, e.convertHex = function(r) {
        return r >= "0".charCodeAt(0) && r <= "9".charCodeAt(0) ? r - "0".charCodeAt(0) : r >= "a".charCodeAt(0) && r <= "f".charCodeAt(0) ? r - "a".charCodeAt(0) + 10 : r >= "A".charCodeAt(0) && r <= "F".charCodeAt(0) ? r - "A".charCodeAt(0) + 10 : -1;
    }, e;
}();

exports.StringUtil = StringUtil;